name: Deploy Database Infra

on:
  pull_request:
    types:
      - closed
    branches:
      - main  

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: ./db-infra
        run: terraform init

      - name: Terraform Validate
        working-directory: ./db-infra
        run: terraform validate

      - name: Delete DB Subnet Group if exists
        working-directory: ./db-infra
        run: |
          echo "Checking if DB Subnet Group exists..."
          EXISTING_SUBNET_GROUP=$(aws rds describe-db-subnet-groups --query "DBSubnetGroups[?DBSubnetGroupName=='rds-subnet-group']" --output text)
          if [ "$EXISTING_SUBNET_GROUP" != "None" ]; then
            echo "DB Subnet Group exists, deleting it..."
            aws rds delete-db-subnet-group --db-subnet-group-name rds-subnet-group || echo "Error deleting DB Subnet Group, it might not exist"
          else
            echo "DB Subnet Group does not exist, skipping deletion."
          fi

      - name: Terraform Plan with Debug Logs
        working-directory: ./db-infra
        run: |
          echo "Running terraform plan with detailed logs..."
          export TF_LOG=DEBUG 
          terraform plan -out=tfplan \
            -var="eks_private_cidrs=${{ secrets.EKS_PRIVATE_CIDRS }}" \
            -var="db_username=${{ secrets.POSTGRES_USER }}" \
            -var="db_password=${{ secrets.POSTGRES_PASSWORD}}"
      
      - name: Terraform Apply with Debug Logs
        working-directory: ./db-infra
        run: |
          echo "Running terraform apply with detailed logs..."
          export TF_LOG=DEBUG
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        working-directory: ./db-infra
        run: |
          echo "Fetching outputs..."
          export RDS_ENDPOINT=$(terraform output -raw rds_endpoint)
          export RDS_SG_ID=$(terraform output -raw rds_security_group_id)
          export VPC_ID=$(terraform output -raw vpc_id)  
          echo "RDS Endpoint: $RDS_ENDPOINT"
          echo "RDS Security Group ID: $RDS_SG_ID"
          echo "VPC ID: $VPC_ID"
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV
          echo "RDS_SG_ID=$RDS_SG_ID" >> $GITHUB_ENV
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
